---
title: "PPCA0026 - Tarefa 5: Métodos de Monte Carlo e MCMC"
subtitle: "Baseado em 'Statistical Computing with R' de Maria Rizzo"
author: "Sílvio Ferreira Gomes Júnior"
date: "2025-08-08"
format:
  html:
    embed-resources: true
    toc: true
    toc-depth: 3
    theme: cosmo
    code-fold: show
    code-tools: true
---

## Introdução

Este arquivo serve como seu template de resposta. Preencha as seções marcadas com seu código R, as saídas geradas, e suas análises textuais.

```{r setup, include=FALSE}
# Carregue todos os pacotes que você usará aqui
library(tidyverse)
library(mvtnorm) # Pode ser útil para o Problema 3
```

---

## Problema 1: Integração por Monte Carlo e Variáveis Antitéticas (Capítulo 7)

Neste problema, vamos estimar o valor de uma integral definida e ver como uma técnica de amostragem mais inteligente pode melhorar a precisão da nossa estimativa.

**Tarefa (baseada no Exercício 7.5 de Rizzo):**

O nosso objetivo é estimar o valor de $I = \int_0^1 \frac{e^{-x}}{1+x^2} dx$.

### 1.1 Estimação com Monte Carlo Padrão

```{r prob1a_standard_mc}
# Defina a função a ser integrada
f <- function(x) {
  # ... seu código aqui ...
}

m <- 10000 # Número de amostras
set.seed(123)

# Gere as amostras e calcule a estimativa
# ... seu código aqui ...

# Reporte a estimativa e a variância empírica
# ...
```

### 1.2 Estimação com Variáveis Antitéticas

```{r prob1b_antithetic_mc}
# Use m/2 amostras para criar m pontos de avaliação
set.seed(123)

# Gere as amostras e calcule a estimativa antitética
# ... seu código aqui ...

# Reporte a estimativa e a variância empírica
# ...
```

### 1.3 Análise e Comparação

*SUA ANÁLISE AQUI:* Apresente uma tabela comparando os resultados (valor estimado e variância) dos dois métodos. Em que percentual a técnica de variáveis antitéticas reduziu a variância da estimativa em comparação com o método de Monte Carlo padrão?

---

## Problema 2: Amostragem por Rejeição (Rejection Sampling) (Capítulo 6)

O objetivo é gerar amostras de uma distribuição `Beta(2, 2)` usando o algoritmo de amostragem por rejeição.

### 2.1 Encontrando a Constante `c`

```{r prob2a_find_c}
# A distribuição alvo é f(x) = dbeta(x, 2, 2)
# A distribuição envelope é g(x) = dunif(x, 0, 1) = 1
# Encontre o valor máximo da razão f(x)/g(x) no intervalo [0, 1].
# Você pode fazer isso analiticamente ou numericamente.

# ... seu código/cálculo aqui ...
```

**Análise da Tarefa 2.1:**

*REPORTE O VALOR DE `c` AQUI E EXPLIQUE COMO O ENCONTROU.*

### 2.2 Implementando o Amostrador por Rejeição

```{r prob2b_rejection_sampler}
# Escreva uma função que implementa o algoritmo de amostragem por rejeição.
# A função deve aceitar n (o número de amostras a gerar) e c como argumentos.
rejection_sampler_beta <- function(n, c) {
  # ... seu código aqui ...
  # Lembre-se de contar o número total de propostas para calcular a taxa de aceitação.
}

# Gere 2000 amostras usando sua função
# amostras_beta <- rejection_sampler_beta(...)
```

### 2.3 Verificação dos Resultados

```{r prob2c_verification}
# Crie um histograma das suas amostras geradas
# Sobreponha a curva de densidade teórica da Beta(2, 2) para verificar
# ... seu código ggplot2 aqui ...

# Reporte a taxa de aceitação do seu amostrador
# ...
```

**Análise da Tarefa 2.3:**

*INCLUA SEU GRÁFICO AQUI.* O histograma das suas amostras corresponde à densidade teórica? O que a taxa de aceitação lhe diz sobre a eficiência do seu amostrador?

---

## Problema 3: O Algoritmo de Metropolis-Hastings (Capítulo 9)

O objetivo é gerar amostras de uma distribuição Normal Bivariada com alta correlação ($\rho=0.9$) usando um amostrador de Metropolis-Hastings de passeio aleatório.

### 3.1 Implementando o Amostrador

```{r prob3a_metropolis_hastings}
# Defina a densidade alvo (ou seu logaritmo)
# A média é (0, 0) e a matriz de covariância tem 1s na diagonal e 0.9 fora dela.
# A função `mvtnorm::dmvnorm` pode ser útil para calcular a densidade.

# Implemente a função do amostrador de Metropolis-Hastings
metropolis_bvn <- function(n_iter, sigma_prop) {
  # n_iter: número de iterações
  # sigma_prop: desvio padrão da proposta (assumido igual para ambas as dimensões)
  
  # ... seu código aqui ...
  # Lembre-se de:
  # 1. Inicializar a cadeia.
  # 2. Loop pelas iterações.
  # 3. Propor um novo ponto.
  # 4. Calcular a razão de aceitação.
  # 5. Aceitar ou rejeitar.
  # 6. Armazenar o ponto na cadeia.
  # 7. Contar as aceitações.
}

# Execute o amostrador
# cadeia_mcmc <- metropolis_bvn(...)
```

### 3.2 Análise da Saída

```{r prob3b_analysis}
# Descarte o burn-in
# burn_in <- 2000
# cadeia_final <- ...

# Crie os trace plots para cada uma das duas variáveis
# ... seu código ggplot2 aqui ...

# Crie o scatter plot das amostras geradas
# ... seu código ggplot2 aqui ...

# Verificação Visual: Sobreponha as linhas de contorno teóricas
# ...

# Reporte a taxa de aceitação
# ...
```

**Análise da Tarefa 3.2:**

*INCLUA SEUS GRÁFICOS AQUI.* Os trace plots indicam que a cadeia convergiu? O scatter plot e as linhas de contorno mostram que seu amostrador explorou a distribuição alvo corretamente? Comente sobre o efeito de diferentes valores para a variância da proposta (`sigma_prop`) na taxa de aceitação e na eficiência do amostrador.
